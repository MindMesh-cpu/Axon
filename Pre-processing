# Step 1: 数据加载与预处理（四分类，BCI Competition IIIa）

import os
import numpy as np
import mne
from sklearn.model_selection import train_test_split

# ========== 配置 ==========
DATA_DIR = '.venv/k3b.gdf'  # 存放 GDF 文件的目录
SUBJECTS = ['S1IIIa', 'S2IIIa', 'S3IIIa']
BANDPASS = (1.0, 50.0)  # 带通滤波范围 (Hz)
NOTCH_FREQS = np.arange(50, 126, 50)  # 正确写法，仅限 Nyquist 以内
 # 50Hz 工频陷波
TMIN, TMAX = 3.0, 7.0  # MI 想象窗口 (s)
TEST_SIZE = 0.2
RANDOM_STATE = 42


# ========== 加载 & 预处理函数 ==========
def load_and_preprocess(subject):
    # 1. 读取原始 GDF
    fpath = os.path.join(DATA_DIR, f'{subject}.gdf')
    raw = mne.io.read_raw_gdf(fpath, preload=True)

    # 2. 通道选取：只保留 EEG 通道
    eeg_picks = mne.pick_types(raw.info, eeg=True, eog=False)
    raw.pick(eeg_picks)

    # 3. 参考重设（若需）
    # raw.set_eeg_reference(ref_channels=['M1', 'M2'])

    # 4. 滤波
    raw.filter(BANDPASS[0], BANDPASS[1], fir_design='firwin')
    raw.notch_filter(NOTCH_FREQS, fir_design='firwin')

    # 5. 可选 ICA 去伪迹（视数据质量而定）
    # ica = mne.preprocessing.ICA(n_components=20, random_state=RANDOM_STATE)
    # ica.fit(raw)
    # raw = ica.apply(raw)

    # 6. 提取事件 & Epochs
    events, event_id = mne.events_from_annotations(raw)
    # event_id 示例： {'769': 0, '770': 1, '771': 2, '772': 3}

    epochs = mne.Epochs(
        raw, events, event_id=event_id,
        tmin=TMIN, tmax=TMAX,
        baseline=None, preload=True,
        event_repeated = 'merge'  # 新增这一行
    )
    X = epochs.get_data()  # (n_epochs, n_channels, n_times)
    y = epochs.events[:, -1]  # 0,1,2,3 四分类标签

    return X, y


# ========== 合并所有被试 ==========
X_all, y_all = [], []
for subj in SUBJECTS:
    X, y = load_and_preprocess(subj)
    X_all.append(X)
    y_all.append(y)

X_all = np.concatenate(X_all, axis=0)
y_all = np.concatenate(y_all, axis=0)
print(f'全部数据：X_all shape = {X_all.shape}, y_all shape = {y_all.shape}')

# ========== 划分训练/测试 ==========
X_train, X_test, y_train, y_test = train_test_split(
    X_all, y_all,
    test_size=TEST_SIZE,
    stratify=y_all,
    random_state=RANDOM_STATE
)
print(f'训练集：{X_train.shape}, 测试集：{X_test.shape}')

# ========== 保存为 .npz ==========
np.savez_compressed(
    os.path.join(DATA_DIR, 'IIIa_data.npz'),
    X_train=X_train, y_train=y_train,
    X_test=X_test, y_test=y_test
)

print('Step 1 完成：数据已预处理并保存为 IIIa_data.npz')
